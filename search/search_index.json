{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Operational Data Standard \u00b6 The Operational Data Standard (ODS) is an open standard for describing scheduled transit operations. ODS leverages the existing General Transit Feed Specification (GTFS) and extends it to include information about personnel and non-revenue service. These concepts are necessary for transit operators to be able to run a scheduled service. Overview \u00b6 Transit providers need the systems they use to schedule and operate their service to be interoperable . Interoperability is best achieved through open standards. While GTFS is a very successful existing open standard, it is designed for giving information to transit riders, and, thus, is missing key concepts that are necessary for transit providers. ODS is a proposal for a new open standard to define deadheads and runs. ODS is based on, and includes references to, GTFS-static files. ODS is proposed as a standard separate from GTFS in order to preserve the privacy of internal operations data. View the full ODS specification .","title":"Home"},{"location":"#operational-data-standard","text":"The Operational Data Standard (ODS) is an open standard for describing scheduled transit operations. ODS leverages the existing General Transit Feed Specification (GTFS) and extends it to include information about personnel and non-revenue service. These concepts are necessary for transit operators to be able to run a scheduled service.","title":"Operational Data Standard"},{"location":"#overview","text":"Transit providers need the systems they use to schedule and operate their service to be interoperable . Interoperability is best achieved through open standards. While GTFS is a very successful existing open standard, it is designed for giving information to transit riders, and, thus, is missing key concepts that are necessary for transit providers. ODS is a proposal for a new open standard to define deadheads and runs. ODS is based on, and includes references to, GTFS-static files. ODS is proposed as a standard separate from GTFS in order to preserve the privacy of internal operations data. View the full ODS specification .","title":"Overview"},{"location":"about/","text":"About ODS \u00b6 This website and the Operational Data Standard are maintained by Cal-ITP , a project of the California Department of Transportation. ODS was originally developed as a product of the Operational Data Standard Working Group, which was convened by Cal-ITP in 2021. For information about how the Operational Data Standard was originally developed, read about the Spec Development Process . To see videos of past meetings or presentations regarding the Operational Data Standard, go to the Resources page For information about the Operational Data Standard Working Group, go to the Working Group page .","title":"About ODS"},{"location":"about/#about-ods","text":"This website and the Operational Data Standard are maintained by Cal-ITP , a project of the California Department of Transportation. ODS was originally developed as a product of the Operational Data Standard Working Group, which was convened by Cal-ITP in 2021. For information about how the Operational Data Standard was originally developed, read about the Spec Development Process . To see videos of past meetings or presentations regarding the Operational Data Standard, go to the Resources page For information about the Operational Data Standard Working Group, go to the Working Group page .","title":"About ODS"},{"location":"about/spec-development/","text":"Specification Development Process \u00b6 Early Development \u00b6 The California Integrated Travel Project (Cal-ITP) developed the ODS initiative in response to feedback from local transit providers and vendors. As Cal-ITP has as its core a mission to improve the quality of mobility data and increase the efficiency of transportation service delivery in the state of California, Cal-ITP conducted research and conversations with an eye toward identifying existing pain points, with the lack of a standard format between scheduling software and CAD/AVL software being identified by respondents as a major source of friction. In 2021, Cal-ITP convened the ODS Working Group, composed of stakeholders throughout the mobility industry, for the purpose of developing and adopting a first version of ODS. These stakeholders included transit schedule firms, CAD/AVL firms, public transit providers, private transit providers, local governments and metropolitan planning organizations (MPOs), labor unions, and manufacturers of integrated on-vehicle hardware solutions (such as Automated Passenger Counting devices or LED signage). For a full list of participating Working Group members, go to the ODS Working Group page . Some of the Working Group\u2019s key initial goals were to: Create common standard for transit operational data Improve efficiency in dispatching, planning, scheduling, driver shift management, and other back-end transit operations Reduce the burden of generating data for reporting (FTA and other) Meetings began in Summer of 2021 and continued through the end of 2021, at which point a framework for v1.0.0 had been reached. After spending several months resolving minor issues with the framework, the ODS Working Group approved v1.0.0 on May 3 rd , 2022. For a full list of past meetings and videos, go to the Resources page .","title":"Spec Development Process"},{"location":"about/spec-development/#specification-development-process","text":"","title":"Specification Development Process"},{"location":"about/spec-development/#early-development","text":"The California Integrated Travel Project (Cal-ITP) developed the ODS initiative in response to feedback from local transit providers and vendors. As Cal-ITP has as its core a mission to improve the quality of mobility data and increase the efficiency of transportation service delivery in the state of California, Cal-ITP conducted research and conversations with an eye toward identifying existing pain points, with the lack of a standard format between scheduling software and CAD/AVL software being identified by respondents as a major source of friction. In 2021, Cal-ITP convened the ODS Working Group, composed of stakeholders throughout the mobility industry, for the purpose of developing and adopting a first version of ODS. These stakeholders included transit schedule firms, CAD/AVL firms, public transit providers, private transit providers, local governments and metropolitan planning organizations (MPOs), labor unions, and manufacturers of integrated on-vehicle hardware solutions (such as Automated Passenger Counting devices or LED signage). For a full list of participating Working Group members, go to the ODS Working Group page . Some of the Working Group\u2019s key initial goals were to: Create common standard for transit operational data Improve efficiency in dispatching, planning, scheduling, driver shift management, and other back-end transit operations Reduce the burden of generating data for reporting (FTA and other) Meetings began in Summer of 2021 and continued through the end of 2021, at which point a framework for v1.0.0 had been reached. After spending several months resolving minor issues with the framework, the ODS Working Group approved v1.0.0 on May 3 rd , 2022. For a full list of past meetings and videos, go to the Resources page .","title":"Early Development"},{"location":"about/working-group/","text":"Working Group \u00b6 The Operational Data Standard working group is convened by staff from the California Integrated Travel Project as part of its goal to provide complete, accurate, and up-to-date transit data to customers and respective agencies. Working group members are expected to commit to supporting the adopted ODS v1 specification. Depending on the organization, supporting the ODS v1 specification may entail developing software to produce or consume the specification, or, for transit agencies, encouraging vendors to support the specification. Membership \u00b6 Transit Agencies \u00b6 AC Transit, CA Clovis Transit, CA Community Transit, WA Foothill Transit, CA Golden Empire Transit, CA Kings Area Rural Transit (KART), CA Los Angeles DOT, CA Marin Transit, CA Massachussets Bay Transit Authority (MBTA), MA Metrolink, CA Metro Transit, MN Nevada County Connects, CA OmniTrans, CA Pasadena Transit, CA SamTrans, CA Sound Transit, WA Stanislaus Regional Transit Authority, CA TriMet, OR Companies \u00b6 Avail Clever Devices Connexionz Cubic Dilax Engie Giro GMV Syncromatics Init Keolis MV Transit Optibus Passio Remix / Via Routematch / Uber Swiftly The Master Scheduler Trapeze Trillium Solutions Other \u00b6 Amalgamated Transit Union California Association for Community Transportation (CALACT) California Integrated Travel Project (Cal-ITP) Metropolitan Transportation Commission/511.org","title":"Working Group"},{"location":"about/working-group/#working-group","text":"The Operational Data Standard working group is convened by staff from the California Integrated Travel Project as part of its goal to provide complete, accurate, and up-to-date transit data to customers and respective agencies. Working group members are expected to commit to supporting the adopted ODS v1 specification. Depending on the organization, supporting the ODS v1 specification may entail developing software to produce or consume the specification, or, for transit agencies, encouraging vendors to support the specification.","title":"Working Group"},{"location":"about/working-group/#membership","text":"","title":"Membership"},{"location":"about/working-group/#transit-agencies","text":"AC Transit, CA Clovis Transit, CA Community Transit, WA Foothill Transit, CA Golden Empire Transit, CA Kings Area Rural Transit (KART), CA Los Angeles DOT, CA Marin Transit, CA Massachussets Bay Transit Authority (MBTA), MA Metrolink, CA Metro Transit, MN Nevada County Connects, CA OmniTrans, CA Pasadena Transit, CA SamTrans, CA Sound Transit, WA Stanislaus Regional Transit Authority, CA TriMet, OR","title":"Transit Agencies"},{"location":"about/working-group/#companies","text":"Avail Clever Devices Connexionz Cubic Dilax Engie Giro GMV Syncromatics Init Keolis MV Transit Optibus Passio Remix / Via Routematch / Uber Swiftly The Master Scheduler Trapeze Trillium Solutions","title":"Companies"},{"location":"about/working-group/#other","text":"Amalgamated Transit Union California Association for Community Transportation (CALACT) California Integrated Travel Project (Cal-ITP) Metropolitan Transportation Commission/511.org","title":"Other"},{"location":"resources/","text":"Resources \u00b6 Past Meetings \u00b6 Meeting Date Description Working Group Meeting #1 20 Jul 2021 Confirmation of need. Stakeholder Scoping Meetings Aug 2021 Individual meetings with stakeholders to get detailed needs and scoping input. Working Group Meeting #2 Aug 2021 Scope confirmation and process confirmation for spec development. Working Group Meeting #3 28 Sep 2021 Personnel Proposal Meeting #3 notes Working Group Meeting #4 19 Oct 2021 Facilities Proposal Meeting #4 video Working Group Meeting #5 16 Nov 2021 Runcutting, Layovers, + Deadheads Proposal Working Group Meeting #6 21 Dec 2021 Adoption of v1 framework Meeting #6 video Working Group Meeting #7 22 Feb 2022 Discussion of Upcoming Implementation Steps Meeting #7 video Working Group Meeting #8 3 May 2022 Reconsideration of v1 framework and adoption of 1.0.0 Meeting #8 video","title":"Resources"},{"location":"resources/#resources","text":"","title":"Resources"},{"location":"resources/#past-meetings","text":"Meeting Date Description Working Group Meeting #1 20 Jul 2021 Confirmation of need. Stakeholder Scoping Meetings Aug 2021 Individual meetings with stakeholders to get detailed needs and scoping input. Working Group Meeting #2 Aug 2021 Scope confirmation and process confirmation for spec development. Working Group Meeting #3 28 Sep 2021 Personnel Proposal Meeting #3 notes Working Group Meeting #4 19 Oct 2021 Facilities Proposal Meeting #4 video Working Group Meeting #5 16 Nov 2021 Runcutting, Layovers, + Deadheads Proposal Working Group Meeting #6 21 Dec 2021 Adoption of v1 framework Meeting #6 video Working Group Meeting #7 22 Feb 2022 Discussion of Upcoming Implementation Steps Meeting #7 video Working Group Meeting #8 3 May 2022 Reconsideration of v1 framework and adoption of 1.0.0 Meeting #8 video","title":"Past Meetings"},{"location":"resources/faq/","text":"Frequently Asked Questions \u00b6 What is \u201coperational data?\u201d \u00b6 Operational data refers to everything a transit provider needs to know \u201cbehind the scenes\u201d in order to provide service to riders. Operational data can include the following information: Vehicle blocking (which vehicles run which routes) Driver shift management (which vehicle operators work on which routes) Vehicle shift start/end time and location (when and where vehicles pull in and out of service) Nonrevenue vehicle service (deadheading) Service disruptions Why is a standard for operational data needed? \u00b6 Operational data is critical for transit providers, but currently it exists primarily in proprietary formats created and maintained by various scheduling and CAD/AVL companies. The use of proprietary formats leads to wide disparities in the experiences that agencies have in trying to create a schedule and then utilizing that schedule in a CAD/AVL software. Agencies often find that their CAD/AVL and scheduling vendors prepare data in different formats, or they use different nomenclature to refer to route and stop names, which results in time-consuming manual processes to align incompatible data sources. The availability of information in the GTFS standard format has not only resulted in better information being available to riders, but it has also led to innovation in features and functionality for use by transit providers themselves. Similarly, creating a standard format for operational data will help transit providers with easier, less expensive, and enhanced scheduling functionality. Isn\u2019t operational data already covered by \u2026 GTFS? \u00b6 Not entirely. GTFS provides what can be thought of as a rider-centric view of transit service. By that, we mean it is built around trip (or journey) planning and the information that riders need to know to complete a trip. While GTFS contains information about where vehicles should be at specified times, most transit agencies could not determine where a specific driver or operator should be at that time using a standard GTFS feed. Critical information for operators\u2014for example, which driver is scheduled to serve a given trip, when and where to layover, or how deadheads should be completed\u2014is not included in GTFS at present. But just because GTFS doesn\u2019t get us all the way there, that doesn\u2019t mean we are planning to start from scratch: ODS is intended to work with GTFS and could ultimately be developed as an extension to GTFS. Isn\u2019t operational data already covered by \u2026 NeTEx/SIRI? \u00b6 Yes. The Network Timetable Exchange, or NeTEx, does cover use cases that are being considered for use in ODS. However, because NeTEx has no foothold in the North American market, a major, coordinated about-face in the industry would be required to move toward the NeTEx/SIRI schema. While NeTEx is one way to represent the operational data that makes up transit schedules, it is neither the only nor even necessarily the easiest way to do so. GTFS is the dominant standard in use for defining transit trips in North America, and research by the California Integrated Travel Project (Cal-ITP) has found that vendors favor GTFS\u2019s flexible and simpler approach to representing transit data. Given the shifts that would need to occur within the industry to move toward NeTEx, Cal-ITP is privileging compatibility with GTFS and taking a GTFS-like approach to developing ODS. Isn\u2019t operational data already covered by \u2026 TCIP? \u00b6 Yes. The Transit Communications Interface Profiles (TCIP) is a standard developed by the American Public Transportation Association approximately 20 years ago to serve as a standard interface between transit systems and the individual subsystems, like scheduling and CAD/AVL, that they rely on. TCIP has never achieved significant adoption in the United States or elsewhere and has been surpassed by the popularity of the simpler and more constrained GTFS family of standards. Without adoption, development of TCIP has not kept pace with extensions and proposed extensions of GTFS, nor with broader changes in the mobility landscape as a whole. Given the shifts that would need to occur within the industry to move toward TCIP, Cal-ITP is privileging compatibility with GTFS and taking a GTFS-like approach to developing ODS. What is Cal-ITP? \u00b6 Cal-ITP is a statewide initiative of the California State Transportation Agency (CalSTA) and the California Department of Transportation (Caltrans) to simplify travel by increasing access to public transportation\u2014including easier, faster payments via contactless credit/debit/prepaid cards and mobile wallets on smart devices, high-quality data standards, and seamless verification of eligibility for transit discounts. Learn more at calitp.org . And visit Cal-ITP\u2019s CAMobilityMarketplace.org for a catalog of code-compliant products and services for transit agencies. What is the ODS Working Group? \u00b6 The Operational Data Standard working group was convened by staff from the California Integrated Travel Project (Cal-ITP) as part of its goal to provide complete, accurate, and up-to-date transit data to customers and respective agencies. Working group members include major transit agencies across the United States and many of the largest transit software companies in North America. Visit our Working Group page for a full list of members. Why is Cal-ITP leading this effort? \u00b6 Cal-ITP developed the ODS initiative in response to feedback from local transit providers and vendors. As Cal-ITP has as its core a mission to improve the quality of mobility data and increase the efficiency of transportation service delivery in the state of California, we have conducted research and conversations with an eye toward identifying existing pain points. The gap that exists between scheduling software and CAD/AVL software was identified by respondents as a major source of friction. Even as GTFS has seen increasingly widespread adoption, operational data is subject to proprietary formats, overlapping use cases, and manual processes that inefficiently transfer data from one system to another. Cal-ITP\u2019s conversations with partners have demonstrated that there is a clear desire among vendors and transit providers to come together around a standard representation of operational data built in the GTFS model. Have more questions? \u00b6 For additional information, please email hello@calitp.org Attn: Scott Frazier / ODS .","title":"Frequently Asked Questions"},{"location":"resources/faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"resources/faq/#what-is-operational-data","text":"Operational data refers to everything a transit provider needs to know \u201cbehind the scenes\u201d in order to provide service to riders. Operational data can include the following information: Vehicle blocking (which vehicles run which routes) Driver shift management (which vehicle operators work on which routes) Vehicle shift start/end time and location (when and where vehicles pull in and out of service) Nonrevenue vehicle service (deadheading) Service disruptions","title":"What is \"operational data?\""},{"location":"resources/faq/#why-is-a-standard-for-operational-data-needed","text":"Operational data is critical for transit providers, but currently it exists primarily in proprietary formats created and maintained by various scheduling and CAD/AVL companies. The use of proprietary formats leads to wide disparities in the experiences that agencies have in trying to create a schedule and then utilizing that schedule in a CAD/AVL software. Agencies often find that their CAD/AVL and scheduling vendors prepare data in different formats, or they use different nomenclature to refer to route and stop names, which results in time-consuming manual processes to align incompatible data sources. The availability of information in the GTFS standard format has not only resulted in better information being available to riders, but it has also led to innovation in features and functionality for use by transit providers themselves. Similarly, creating a standard format for operational data will help transit providers with easier, less expensive, and enhanced scheduling functionality.","title":"Why is a standard for operational data needed?"},{"location":"resources/faq/#isnt-operational-data-already-covered-by-gtfs","text":"Not entirely. GTFS provides what can be thought of as a rider-centric view of transit service. By that, we mean it is built around trip (or journey) planning and the information that riders need to know to complete a trip. While GTFS contains information about where vehicles should be at specified times, most transit agencies could not determine where a specific driver or operator should be at that time using a standard GTFS feed. Critical information for operators\u2014for example, which driver is scheduled to serve a given trip, when and where to layover, or how deadheads should be completed\u2014is not included in GTFS at present. But just because GTFS doesn\u2019t get us all the way there, that doesn\u2019t mean we are planning to start from scratch: ODS is intended to work with GTFS and could ultimately be developed as an extension to GTFS.","title":"Isn\u2019t operational data already covered by \u2026 GTFS?"},{"location":"resources/faq/#isnt-operational-data-already-covered-by-netexsiri","text":"Yes. The Network Timetable Exchange, or NeTEx, does cover use cases that are being considered for use in ODS. However, because NeTEx has no foothold in the North American market, a major, coordinated about-face in the industry would be required to move toward the NeTEx/SIRI schema. While NeTEx is one way to represent the operational data that makes up transit schedules, it is neither the only nor even necessarily the easiest way to do so. GTFS is the dominant standard in use for defining transit trips in North America, and research by the California Integrated Travel Project (Cal-ITP) has found that vendors favor GTFS\u2019s flexible and simpler approach to representing transit data. Given the shifts that would need to occur within the industry to move toward NeTEx, Cal-ITP is privileging compatibility with GTFS and taking a GTFS-like approach to developing ODS.","title":"Isn\u2019t operational data already covered by \u2026 NeTEx/SIRI?"},{"location":"resources/faq/#isnt-operational-data-already-covered-by-tcip","text":"Yes. The Transit Communications Interface Profiles (TCIP) is a standard developed by the American Public Transportation Association approximately 20 years ago to serve as a standard interface between transit systems and the individual subsystems, like scheduling and CAD/AVL, that they rely on. TCIP has never achieved significant adoption in the United States or elsewhere and has been surpassed by the popularity of the simpler and more constrained GTFS family of standards. Without adoption, development of TCIP has not kept pace with extensions and proposed extensions of GTFS, nor with broader changes in the mobility landscape as a whole. Given the shifts that would need to occur within the industry to move toward TCIP, Cal-ITP is privileging compatibility with GTFS and taking a GTFS-like approach to developing ODS.","title":"Isn\u2019t operational data already covered by \u2026 TCIP?"},{"location":"resources/faq/#what-is-cal-itp","text":"Cal-ITP is a statewide initiative of the California State Transportation Agency (CalSTA) and the California Department of Transportation (Caltrans) to simplify travel by increasing access to public transportation\u2014including easier, faster payments via contactless credit/debit/prepaid cards and mobile wallets on smart devices, high-quality data standards, and seamless verification of eligibility for transit discounts. Learn more at calitp.org . And visit Cal-ITP\u2019s CAMobilityMarketplace.org for a catalog of code-compliant products and services for transit agencies.","title":"What is Cal-ITP?"},{"location":"resources/faq/#what-is-the-ods-working-group","text":"The Operational Data Standard working group was convened by staff from the California Integrated Travel Project (Cal-ITP) as part of its goal to provide complete, accurate, and up-to-date transit data to customers and respective agencies. Working group members include major transit agencies across the United States and many of the largest transit software companies in North America. Visit our Working Group page for a full list of members.","title":"What is the ODS Working Group?"},{"location":"resources/faq/#why-is-cal-itp-leading-this-effort","text":"Cal-ITP developed the ODS initiative in response to feedback from local transit providers and vendors. As Cal-ITP has as its core a mission to improve the quality of mobility data and increase the efficiency of transportation service delivery in the state of California, we have conducted research and conversations with an eye toward identifying existing pain points. The gap that exists between scheduling software and CAD/AVL software was identified by respondents as a major source of friction. Even as GTFS has seen increasingly widespread adoption, operational data is subject to proprietary formats, overlapping use cases, and manual processes that inefficiently transfer data from one system to another. Cal-ITP\u2019s conversations with partners have demonstrated that there is a clear desire among vendors and transit providers to come together around a standard representation of operational data built in the GTFS model.","title":"Why is Cal-ITP leading this effort?"},{"location":"resources/faq/#have-more-questions","text":"For additional information, please email hello@calitp.org Attn: Scott Frazier / ODS .","title":"Have more questions?"},{"location":"spec/","text":"Reference \u00b6 The Operational Data Standard was last updated on April 14, 2022 (v1.0). View the full revision history . Dataset Files \u00b6 File Name Description deadheads.txt Defines scheduled deadheads contained in a transit feed. (This file is analogous to trips.txt for non-revenue operations.) ops_locations.txt Significant operational locations relevant to the performance of vehicle deadheads. (This file is analogous to stops.txt for non-revenue operations.) deadhead_times.txt Times that a vehicle arrives at and departs from operational locations for each deadhead. (This file is analogous to stop_times.txt for non-revenue operations.) runs_pieces.txt Defines daily personnel schedules within a feed. run_events.txt Defines other scheduled activities to be performed by a member of personnel during a run. Field Definitions \u00b6 deadheads.txt \u00b6 Field Name Type Required Description deadhead_id ID Required Identifies a deadhead. service_id ID referencing calendar.service_id Required Identifies a set of dates when the deadhead is scheduled to take place. block_id ID Required Identifies the block to which the deadhead belongs. shape_id ID referencing shapes.shape_id Optional Identifies a geospatial shape that describes the vehicle travel path for a deadhead. to_trip_id ID referencing trips.trip_id Conditionally Required Identifies the trip scheduled immediately following to the deadhead within the block_id. from_trip_id ID referencing trips.trip_id Conditionally Required Identifies the trip scheduled immediately prior to the deadhead within the block_id. to_deadhead_id ID referencing deadheads.deadhead_id Conditionally Required Identifies the deadhead scheduled immediately following the deadhead within the block_id. to_deadhead_id ID referencing deadheads.deadhead_id Conditionally Required Identifies the deadhead scheduled immediately prior to the deadhead within the block_id. ops_locations.txt \u00b6 Field Name Type Required Description ops_location_id ID Required Identifies an operational location. ops_location_code String Optional Short text or a number that identifies the operational location for internal use. ops_location_name String Required Name of the operational location. ops_location_desc String Optional Description of the operational location. ops_location_lat Latitude Required The latitude of the operational location. ops_location_lon Longitude Required The longitude of the operational location. deadhead_times.txt \u00b6 Field Name Type Required Description deadhead_id ID referencing deadheads.deadhead_id Required Identifies a deadhead. arrival_time Time Required The time at which the vehicle is scheduled to arrive at the operational location specified by this record. departure_time Time Required The time at which the vehicle is scheduled to depart from the operational location specified by this record. ops_location_id ID referencing ops_locations.ops_location_id Conditionally Required Identifies the operational location specified by this record. If stop_id is blank, ops_location_id is required. If stop_id is not blank, ops_location_id must be blank. stop_id ID referencing stops.stop_id Conditionally Required Identifies the stop specified by this record. If ops_location_id is blank, stop_id is required. If ops_location_id is not blank, stop_id must be blank. location_sequence Non-negative Integer Required Order of locations, including both operational locations and stops, for a particular deadhead. The values must increase along the trip but do not need to be consecutive. shape_dist_traveled Non-negative Float Optional Actual distance traveled along the associated shape, from the first location to the location specified in this record. runs_pieces.txt \u00b6 Field Name Type Required Description run_id ID Required Identifies a run. piece_id ID Required Identifies the piece of the run. The piece_id field must be unique. start_type Enum Required Indicates whether the piece begins with a deadhead, a revenue trip, or an event. 0 - Deadhead 1 - Trip 2 - Event start_trip_id ID referencing deadheads.deadhead_id or trips.trip_id Required Identifies the deadhead or trip with which the piece begins. start_trip_position Non-negative Integer referencing deadhead_times.location_sequence or stop_times.stop_sequence Optional Identifies the first operational location or stop to be serviced in the first trip of the piece. This field should only be filled out if the piece does not begin at the first stop of the start trip. end_type Enum Required Indicates whether the piece ends with a deadhead, a revenue trip, or an event. 0 - Deadhead 1 - Trip 2 - Event end_trip_id ID referencing deadheads.deadhead_id or trips.trip_id Required Identifies the deadhead or trip with which the piece ends. end_trip_position Non-negative Integer referencing deadhead_times.location_sequence or stop_times.stop_sequence Optional Identifies the last operational location or stop to be serviced in the last trip of the piece. This field should only be filled out if the piece does not end at the last stop of the end trip. run_events.txt \u00b6 Field Name Type Required Description run_event_id ID Required Identifies a run event. piece_id ID referencing runs_pieces.piece_id Required Identifies the piece during which the run event takes place. event_type Enum Required Indicates which event is scheduled in this entry. 0 - Report Time 1 - Pre-Trip Activity 2 - Post-Trip Activity 3 - Fueling 4 - Break 5 - Availability 6 - Activity 7 - Other event_name String Optional The name for the event that is being used. event_time Time Required The time at which the event begins. event_duration Non-negative Integer Required The scheduled duration of the event from the event_time in seconds. event_from_location_type Enum Optional Indicates whether the event is scheduled to begin at an operational location or a stop. 0 - Operational Location 1 - Stop event_from_location_id ID referencing ops_locations.ops_location_id or stops.stop_id Optional Identifies the operational location or stop at which the event is scheduled to begin. event_to_location_type Enum Optional Indicates whether the event is scheduled to end at an operational location or a stop. 0 - Operational Location 1 - Stop event_to_location_id ID referencing ops_locations.ops_location_id or stops.stop_id Optional Identifies the operational location or stop at which the event is scheduled to end.","title":"Reference"},{"location":"spec/#reference","text":"The Operational Data Standard was last updated on April 14, 2022 (v1.0). View the full revision history .","title":"Reference"},{"location":"spec/#dataset-files","text":"File Name Description deadheads.txt Defines scheduled deadheads contained in a transit feed. (This file is analogous to trips.txt for non-revenue operations.) ops_locations.txt Significant operational locations relevant to the performance of vehicle deadheads. (This file is analogous to stops.txt for non-revenue operations.) deadhead_times.txt Times that a vehicle arrives at and departs from operational locations for each deadhead. (This file is analogous to stop_times.txt for non-revenue operations.) runs_pieces.txt Defines daily personnel schedules within a feed. run_events.txt Defines other scheduled activities to be performed by a member of personnel during a run.","title":"Dataset Files"},{"location":"spec/#field-definitions","text":"","title":"Field Definitions"},{"location":"spec/#deadheadstxt","text":"Field Name Type Required Description deadhead_id ID Required Identifies a deadhead. service_id ID referencing calendar.service_id Required Identifies a set of dates when the deadhead is scheduled to take place. block_id ID Required Identifies the block to which the deadhead belongs. shape_id ID referencing shapes.shape_id Optional Identifies a geospatial shape that describes the vehicle travel path for a deadhead. to_trip_id ID referencing trips.trip_id Conditionally Required Identifies the trip scheduled immediately following to the deadhead within the block_id. from_trip_id ID referencing trips.trip_id Conditionally Required Identifies the trip scheduled immediately prior to the deadhead within the block_id. to_deadhead_id ID referencing deadheads.deadhead_id Conditionally Required Identifies the deadhead scheduled immediately following the deadhead within the block_id. to_deadhead_id ID referencing deadheads.deadhead_id Conditionally Required Identifies the deadhead scheduled immediately prior to the deadhead within the block_id.","title":"deadheads.txt"},{"location":"spec/#ops_locationstxt","text":"Field Name Type Required Description ops_location_id ID Required Identifies an operational location. ops_location_code String Optional Short text or a number that identifies the operational location for internal use. ops_location_name String Required Name of the operational location. ops_location_desc String Optional Description of the operational location. ops_location_lat Latitude Required The latitude of the operational location. ops_location_lon Longitude Required The longitude of the operational location.","title":"ops_locations.txt"},{"location":"spec/#deadhead_timestxt","text":"Field Name Type Required Description deadhead_id ID referencing deadheads.deadhead_id Required Identifies a deadhead. arrival_time Time Required The time at which the vehicle is scheduled to arrive at the operational location specified by this record. departure_time Time Required The time at which the vehicle is scheduled to depart from the operational location specified by this record. ops_location_id ID referencing ops_locations.ops_location_id Conditionally Required Identifies the operational location specified by this record. If stop_id is blank, ops_location_id is required. If stop_id is not blank, ops_location_id must be blank. stop_id ID referencing stops.stop_id Conditionally Required Identifies the stop specified by this record. If ops_location_id is blank, stop_id is required. If ops_location_id is not blank, stop_id must be blank. location_sequence Non-negative Integer Required Order of locations, including both operational locations and stops, for a particular deadhead. The values must increase along the trip but do not need to be consecutive. shape_dist_traveled Non-negative Float Optional Actual distance traveled along the associated shape, from the first location to the location specified in this record.","title":"deadhead_times.txt"},{"location":"spec/#runs_piecestxt","text":"Field Name Type Required Description run_id ID Required Identifies a run. piece_id ID Required Identifies the piece of the run. The piece_id field must be unique. start_type Enum Required Indicates whether the piece begins with a deadhead, a revenue trip, or an event. 0 - Deadhead 1 - Trip 2 - Event start_trip_id ID referencing deadheads.deadhead_id or trips.trip_id Required Identifies the deadhead or trip with which the piece begins. start_trip_position Non-negative Integer referencing deadhead_times.location_sequence or stop_times.stop_sequence Optional Identifies the first operational location or stop to be serviced in the first trip of the piece. This field should only be filled out if the piece does not begin at the first stop of the start trip. end_type Enum Required Indicates whether the piece ends with a deadhead, a revenue trip, or an event. 0 - Deadhead 1 - Trip 2 - Event end_trip_id ID referencing deadheads.deadhead_id or trips.trip_id Required Identifies the deadhead or trip with which the piece ends. end_trip_position Non-negative Integer referencing deadhead_times.location_sequence or stop_times.stop_sequence Optional Identifies the last operational location or stop to be serviced in the last trip of the piece. This field should only be filled out if the piece does not end at the last stop of the end trip.","title":"runs_pieces.txt"},{"location":"spec/#run_eventstxt","text":"Field Name Type Required Description run_event_id ID Required Identifies a run event. piece_id ID referencing runs_pieces.piece_id Required Identifies the piece during which the run event takes place. event_type Enum Required Indicates which event is scheduled in this entry. 0 - Report Time 1 - Pre-Trip Activity 2 - Post-Trip Activity 3 - Fueling 4 - Break 5 - Availability 6 - Activity 7 - Other event_name String Optional The name for the event that is being used. event_time Time Required The time at which the event begins. event_duration Non-negative Integer Required The scheduled duration of the event from the event_time in seconds. event_from_location_type Enum Optional Indicates whether the event is scheduled to begin at an operational location or a stop. 0 - Operational Location 1 - Stop event_from_location_id ID referencing ops_locations.ops_location_id or stops.stop_id Optional Identifies the operational location or stop at which the event is scheduled to begin. event_to_location_type Enum Optional Indicates whether the event is scheduled to end at an operational location or a stop. 0 - Operational Location 1 - Stop event_to_location_id ID referencing ops_locations.ops_location_id or stops.stop_id Optional Identifies the operational location or stop at which the event is scheduled to end.","title":"run_events.txt"},{"location":"spec/examples/","text":"Examples \u00b6 The following sections provide examples of how ODS can represent specific use cases. The inclusion of these examples should not be as an indication that this is the only way to represent these use cases with ODS. If you have questions about a use case not represented here, please feel free to create an issue in GitHub . Representing Runs \u00b6 Single Run with Single Piece Single Run with Multiple Pieces Multiple Runs on a Single Block (No Mid-Trip Relief) Multiple Runs on a Single Block (With Mid-Trip Relief) Using run_events.txt \u00b6 Pretripping and Pull-Out Using deadhead_times.txt \u00b6 Deadheading from yard to start of trip","title":"Introduction"},{"location":"spec/examples/#examples","text":"The following sections provide examples of how ODS can represent specific use cases. The inclusion of these examples should not be as an indication that this is the only way to represent these use cases with ODS. If you have questions about a use case not represented here, please feel free to create an issue in GitHub .","title":"Examples"},{"location":"spec/examples/#representing-runs","text":"Single Run with Single Piece Single Run with Multiple Pieces Multiple Runs on a Single Block (No Mid-Trip Relief) Multiple Runs on a Single Block (With Mid-Trip Relief)","title":"Representing Runs"},{"location":"spec/examples/#using-run_eventstxt","text":"Pretripping and Pull-Out","title":"Using run_events.txt"},{"location":"spec/examples/#using-deadhead_timestxt","text":"Deadheading from yard to start of trip","title":"Using deadhead_times.txt"},{"location":"spec/revision-history/","text":"Revision History \u00b6 3 May 2022 \u00b6 ODS v1.0.0 is adopted by the ODS Working Group","title":"Revision History"},{"location":"spec/revision-history/#revision-history","text":"","title":"Revision History"},{"location":"spec/revision-history/#3-may-2022","text":"ODS v1.0.0 is adopted by the ODS Working Group","title":"3 May 2022"},{"location":"spec/examples/deadheading-yard-trip-start/","text":"Deadheading from yard to start of trip \u00b6 Data \u00b6 stops.txt \u00b6 stop_id,stop_code,stop_name,stop_desc,stop_lat,stop_lon,zone_id,stop_url,location_type,parent_station,stop_timezone,wheelchair_boarding,level_id,platform_code 8500,8500,\"First Stop\",,33.000,-153.000,,,,,,,,, 8501,8501,\"Second Stop\",,33.000,-153.000,,,,,,,,, 8502,8502,\"Third Stop\",,33.000,-153.000,,,,,,,,, 8503,8503,\"Fourth Stop\",,33.000,-153.000,,,,,,,,, 8504,8504,\"Fifth Stop\",,33.000,-153.000,,,,,,,,, 8505,8505,\"Sixth Stop\",,33.000,-153.000,,,,,,,,, 8506,8506,\"Seventh Stop\",,33.000,-153.000,,,,,,,,, 8507,8507,\"Eighth Stop\",,33.000,-153.000,,,,,,,,, stop_times.txt \u00b6 trip_id,arrival_time,departure_time,stop_id,stop_sequence,stop_headsign,pickup_type,drop_off_type,continuous_pickup,continuous_drop_off,shape_dist_traveled,timepoint 101,10:00:00,10:01:00,8500,1,,,,,, 101,10:10:00,10:11:00,8501,2,,,,,, 101,10:20:00,10:21:00,5492,3,,,,,, 101,10:30:00,10:31:00,5493,4,,,,,, 101,10:40:00,10:41:00,5494,5,,,,,, 101,10:50:00,10:51:00,5495,6,,,,,, 101,11:00:00,11:01:00,5496,7,,,,,, 101,11:10:00,11:11:00,5497,8,,,,,, deadheads.txt \u00b6 deadhead_id,service_id,block_id,shape_id,to_trip_id,from_trip_id,to_deadhead_id,from_deadhead_id test-deadhead,daily,BLOCK-A,,101,,, deadhead_times.txt \u00b6 deadhead_id,arrival_time,departure_time,ops_location_id,stop_id,location_sequence,shape_dist_traveled test-deadhead,09:45:00,09:45:00,yard,,0, test-deadhead,09:46:00,09:46:00,yard-pull-out,,1, test-deadhead,09:50:00,09:50:00,,8506,2, test-deadhead,09:55:00,09:55:00,,8507,3, test-deadhead,10:00:00,10:00:00,,8500,4, ops_locations.txt \u00b6 ops_location_id,ops_location_code,ops_location_name,ops_location_desc,ops_location_lat,ops_location_lon yard,,\"Main Yard\",,34.000,-115.00 yard-pull-out,,\"Yard Pull Out\",,34.000,-115.00","title":"Deadheading from yard to start of trip"},{"location":"spec/examples/deadheading-yard-trip-start/#deadheading-from-yard-to-start-of-trip","text":"","title":"Deadheading from yard to start of trip"},{"location":"spec/examples/deadheading-yard-trip-start/#data","text":"","title":"Data"},{"location":"spec/examples/deadheading-yard-trip-start/#stopstxt","text":"stop_id,stop_code,stop_name,stop_desc,stop_lat,stop_lon,zone_id,stop_url,location_type,parent_station,stop_timezone,wheelchair_boarding,level_id,platform_code 8500,8500,\"First Stop\",,33.000,-153.000,,,,,,,,, 8501,8501,\"Second Stop\",,33.000,-153.000,,,,,,,,, 8502,8502,\"Third Stop\",,33.000,-153.000,,,,,,,,, 8503,8503,\"Fourth Stop\",,33.000,-153.000,,,,,,,,, 8504,8504,\"Fifth Stop\",,33.000,-153.000,,,,,,,,, 8505,8505,\"Sixth Stop\",,33.000,-153.000,,,,,,,,, 8506,8506,\"Seventh Stop\",,33.000,-153.000,,,,,,,,, 8507,8507,\"Eighth Stop\",,33.000,-153.000,,,,,,,,,","title":"stops.txt"},{"location":"spec/examples/deadheading-yard-trip-start/#stop_timestxt","text":"trip_id,arrival_time,departure_time,stop_id,stop_sequence,stop_headsign,pickup_type,drop_off_type,continuous_pickup,continuous_drop_off,shape_dist_traveled,timepoint 101,10:00:00,10:01:00,8500,1,,,,,, 101,10:10:00,10:11:00,8501,2,,,,,, 101,10:20:00,10:21:00,5492,3,,,,,, 101,10:30:00,10:31:00,5493,4,,,,,, 101,10:40:00,10:41:00,5494,5,,,,,, 101,10:50:00,10:51:00,5495,6,,,,,, 101,11:00:00,11:01:00,5496,7,,,,,, 101,11:10:00,11:11:00,5497,8,,,,,,","title":"stop_times.txt"},{"location":"spec/examples/deadheading-yard-trip-start/#deadheadstxt","text":"deadhead_id,service_id,block_id,shape_id,to_trip_id,from_trip_id,to_deadhead_id,from_deadhead_id test-deadhead,daily,BLOCK-A,,101,,,","title":"deadheads.txt"},{"location":"spec/examples/deadheading-yard-trip-start/#deadhead_timestxt","text":"deadhead_id,arrival_time,departure_time,ops_location_id,stop_id,location_sequence,shape_dist_traveled test-deadhead,09:45:00,09:45:00,yard,,0, test-deadhead,09:46:00,09:46:00,yard-pull-out,,1, test-deadhead,09:50:00,09:50:00,,8506,2, test-deadhead,09:55:00,09:55:00,,8507,3, test-deadhead,10:00:00,10:00:00,,8500,4,","title":"deadhead_times.txt"},{"location":"spec/examples/deadheading-yard-trip-start/#ops_locationstxt","text":"ops_location_id,ops_location_code,ops_location_name,ops_location_desc,ops_location_lat,ops_location_lon yard,,\"Main Yard\",,34.000,-115.00 yard-pull-out,,\"Yard Pull Out\",,34.000,-115.00","title":"ops_locations.txt"},{"location":"spec/examples/multiple-runs-single-block/","text":"Multiple Runs on a Single Block (No Mid-Trip Relief) \u00b6 In this example, bus driver X is assigned to run 10000 and completes trips 101 and 102. Bus driver Y is assigned to run 20000 and completes trips 103 and 104 immediately following trip 102. The trips serve route 12 and are part of block BLOCK-A. Driver X begins their day at a bus yard prior to trip 101 and driver Y returns to the same bus yard following trip 104. Characteristics \u00b6 Run 10000 and run 20000 are not subdivided into multiple pieces. Run 10000 ends at the last scheduled stop of a trip. Run 20000 begins at the first scheduled stop of a trip. Data \u00b6 trips.txt \u00b6 route_id,service_id,trip_id,trip_headsign,trip_short_name,direction_id,block_id,shape_id,wheelchair_accessible,bikes_allowed 12,daily,101,,,0,BLOCK-A,,,, 12,daily,102,,,1,BLOCK-A,,,, 12,daily,103,,,0,BLOCK-A,,,, 12,daily,104,,,1,BLOCK-A,,,, calendar.txt \u00b6 service_id,monday,tuesday,wednesday,thursday,friday,saturday,sunday,start_date,end_date daily,1,1,1,1,1,1,1,01012022,12312022 deadheads.txt \u00b6 deadhead_id,service_id,block_id,shape_id,to_trip_id,from_trip_id,to_deadhead_id,from_deadhead_id daily-deadhead-1,daily,BLOCK-A,,101,,, daily-deadhead-2,daily,BLOCK-A,,,104,, runs_pieces.txt \u00b6 run_id,piece_id,start_type,start_trip_id,start_trip_position,end_type,end_trip_id,end_trip_position 10000,10000-1,,0,daily-deadhead-1,,1,102, 20000,20000-2,,1,103,,0,daily-deadhead-2,","title":"Multiple Runs on a Single Block (No Mid-Trip Relief)"},{"location":"spec/examples/multiple-runs-single-block/#multiple-runs-on-a-single-block-no-mid-trip-relief","text":"In this example, bus driver X is assigned to run 10000 and completes trips 101 and 102. Bus driver Y is assigned to run 20000 and completes trips 103 and 104 immediately following trip 102. The trips serve route 12 and are part of block BLOCK-A. Driver X begins their day at a bus yard prior to trip 101 and driver Y returns to the same bus yard following trip 104.","title":"Multiple Runs on a Single Block (No Mid-Trip Relief)"},{"location":"spec/examples/multiple-runs-single-block/#characteristics","text":"Run 10000 and run 20000 are not subdivided into multiple pieces. Run 10000 ends at the last scheduled stop of a trip. Run 20000 begins at the first scheduled stop of a trip.","title":"Characteristics"},{"location":"spec/examples/multiple-runs-single-block/#data","text":"","title":"Data"},{"location":"spec/examples/multiple-runs-single-block/#tripstxt","text":"route_id,service_id,trip_id,trip_headsign,trip_short_name,direction_id,block_id,shape_id,wheelchair_accessible,bikes_allowed 12,daily,101,,,0,BLOCK-A,,,, 12,daily,102,,,1,BLOCK-A,,,, 12,daily,103,,,0,BLOCK-A,,,, 12,daily,104,,,1,BLOCK-A,,,,","title":"trips.txt"},{"location":"spec/examples/multiple-runs-single-block/#calendartxt","text":"service_id,monday,tuesday,wednesday,thursday,friday,saturday,sunday,start_date,end_date daily,1,1,1,1,1,1,1,01012022,12312022","title":"calendar.txt"},{"location":"spec/examples/multiple-runs-single-block/#deadheadstxt","text":"deadhead_id,service_id,block_id,shape_id,to_trip_id,from_trip_id,to_deadhead_id,from_deadhead_id daily-deadhead-1,daily,BLOCK-A,,101,,, daily-deadhead-2,daily,BLOCK-A,,,104,,","title":"deadheads.txt"},{"location":"spec/examples/multiple-runs-single-block/#runs_piecestxt","text":"run_id,piece_id,start_type,start_trip_id,start_trip_position,end_type,end_trip_id,end_trip_position 10000,10000-1,,0,daily-deadhead-1,,1,102, 20000,20000-2,,1,103,,0,daily-deadhead-2,","title":"runs_pieces.txt"},{"location":"spec/examples/multiple-runs-single-block-midtrip-relief/","text":"Multiple Runs on a Single Block (With Mid-Trip Relief) \u00b6 In this example, bus driver X is assigned to run 10000 and completes trip 101 and part of trip 102. Bus driver Y is assigned to run 20000 and completes the remainder of trip 102, before proceeding to trips 103 and 104. The trips serve route 12 and are part of block BLOCK-A. Driver X begins their day at a bus yard prior to trip 101 and driver Y returns to the same bus yard following trip 104. Characteristics \u00b6 Run 10000 and run 20000 are not subdivided into multiple pieces. Run 10000 ends before the last scheduled stop of a trip (a driver is relieved mid-trip). Run 20000 begins after the first scheduled stop of a trip (the driver is relieving someone mid-trip). Data \u00b6 trips.txt \u00b6 route_id,service_id,trip_id,trip_headsign,trip_short_name,direction_id,block_id,shape_id,wheelchair_accessible,bikes_allowed 12,daily,101,,,0,BLOCK-A,,,, 12,daily,102,,,1,BLOCK-A,,,, 12,daily,103,,,0,BLOCK-A,,,, 12,daily,104,,,1,BLOCK-A,,,, calendar.txt \u00b6 service_id,monday,tuesday,wednesday,thursday,friday,saturday,sunday,start_date,end_date daily,1,1,1,1,1,1,1,01012022,12312022 deadheads.txt \u00b6 deadhead_id,service_id,block_id,shape_id,to_trip_id,from_trip_id,to_deadhead_id,from_deadhead_id daily-deadhead-1,daily,BLOCK-A,,101,,, daily-deadhead-2,daily,BLOCK-A,,,104,, runs_pieces.txt \u00b6 run_id,piece_id,start_type,start_trip_id,start_trip_position,end_type,end_trip_id,end_trip_position 10000,10000-1,0,daily-deadhead-1,,1,102,mid_relief_stop 20000,20000-1,1,103,mid_relief_stop,0,daily-deadhead-2,","title":"Multiple Runs on a Single Block (With Mid-Trip Relief)"},{"location":"spec/examples/multiple-runs-single-block-midtrip-relief/#multiple-runs-on-a-single-block-with-mid-trip-relief","text":"In this example, bus driver X is assigned to run 10000 and completes trip 101 and part of trip 102. Bus driver Y is assigned to run 20000 and completes the remainder of trip 102, before proceeding to trips 103 and 104. The trips serve route 12 and are part of block BLOCK-A. Driver X begins their day at a bus yard prior to trip 101 and driver Y returns to the same bus yard following trip 104.","title":"Multiple Runs on a Single Block (With Mid-Trip Relief)"},{"location":"spec/examples/multiple-runs-single-block-midtrip-relief/#characteristics","text":"Run 10000 and run 20000 are not subdivided into multiple pieces. Run 10000 ends before the last scheduled stop of a trip (a driver is relieved mid-trip). Run 20000 begins after the first scheduled stop of a trip (the driver is relieving someone mid-trip).","title":"Characteristics"},{"location":"spec/examples/multiple-runs-single-block-midtrip-relief/#data","text":"","title":"Data"},{"location":"spec/examples/multiple-runs-single-block-midtrip-relief/#tripstxt","text":"route_id,service_id,trip_id,trip_headsign,trip_short_name,direction_id,block_id,shape_id,wheelchair_accessible,bikes_allowed 12,daily,101,,,0,BLOCK-A,,,, 12,daily,102,,,1,BLOCK-A,,,, 12,daily,103,,,0,BLOCK-A,,,, 12,daily,104,,,1,BLOCK-A,,,,","title":"trips.txt"},{"location":"spec/examples/multiple-runs-single-block-midtrip-relief/#calendartxt","text":"service_id,monday,tuesday,wednesday,thursday,friday,saturday,sunday,start_date,end_date daily,1,1,1,1,1,1,1,01012022,12312022","title":"calendar.txt"},{"location":"spec/examples/multiple-runs-single-block-midtrip-relief/#deadheadstxt","text":"deadhead_id,service_id,block_id,shape_id,to_trip_id,from_trip_id,to_deadhead_id,from_deadhead_id daily-deadhead-1,daily,BLOCK-A,,101,,, daily-deadhead-2,daily,BLOCK-A,,,104,,","title":"deadheads.txt"},{"location":"spec/examples/multiple-runs-single-block-midtrip-relief/#runs_piecestxt","text":"run_id,piece_id,start_type,start_trip_id,start_trip_position,end_type,end_trip_id,end_trip_position 10000,10000-1,0,daily-deadhead-1,,1,102,mid_relief_stop 20000,20000-1,1,103,mid_relief_stop,0,daily-deadhead-2,","title":"runs_pieces.txt"},{"location":"spec/examples/pretripping-pull-out/","text":"Pretripping and Pull-Out \u00b6 In this example, bus driver X is assigned to run 10000 and piece 10000-1. The driver reports to the yard at 5:50 a.m. and begins pre-trip inspection at 6:07 a.m. before pulling out of the yard for trip 101 at 6:20 a.m. The driver is scheduled to arrive at the first stop of trip 101 at 6:28 a.m. and depart at 6:30 a.m. Data \u00b6 trips.txt \u00b6 route_id,service_id,trip_id,trip_headsign,trip_short_name,direction_id,block_id,shape_id,wheelchair_accessible,bikes_allowed 12,daily,101,,,0,BLOCK-A,,,, calendar.txt \u00b6 service_id,monday,tuesday,wednesday,thursday,friday,saturday,sunday,start_date,end_date daily,1,1,1,1,1,1,1,01012022,12312022 stop_times.txt \u00b6 trip_id,arrival_time,departure_time,stop_id,stop_sequence,stop_headsign,pickup_type,drop_off_type,continuous_pickup,continuous_drop_off,shape_dist_traveled,timepoint 101,06:28:00,06:30:00,5490,0,,,,,, 101,06:40:00,06:40:00,5491,1,,,,,, 101,06:50:00,06:50:00,5492,2,,,,,, 101,07:00:00,07:00:00,5493,3,,,,,, runs_pieces.txt \u00b6 run_id,piece_id,start_type,start_trip_id,start_trip_position,end_type,end_trip_id,end_trip_position 10000,10000-1,0,daily-deadhead-1,,1,101, run_events.txt \u00b6 run_event_id,piece_id,event_type,event_name,event_time,event_duration,event_to_location_type,event_to_location_id,event_from_location_type,event_from_location_id af0d9802,10000-1,0,,05:50:00,0,0,yard,0,yard ebc02834,10000-1,1,\"pre-trip inspection\",06:07:00,600,0,yard,0,yard 1f4da873,10000-1,7,\"pull-out from yard\",06:20:00,0,0,pull-out-point,0,pull-out-point","title":"Pretripping and Pull-Out"},{"location":"spec/examples/pretripping-pull-out/#pretripping-and-pull-out","text":"In this example, bus driver X is assigned to run 10000 and piece 10000-1. The driver reports to the yard at 5:50 a.m. and begins pre-trip inspection at 6:07 a.m. before pulling out of the yard for trip 101 at 6:20 a.m. The driver is scheduled to arrive at the first stop of trip 101 at 6:28 a.m. and depart at 6:30 a.m.","title":"Pretripping and Pull-Out"},{"location":"spec/examples/pretripping-pull-out/#data","text":"","title":"Data"},{"location":"spec/examples/pretripping-pull-out/#tripstxt","text":"route_id,service_id,trip_id,trip_headsign,trip_short_name,direction_id,block_id,shape_id,wheelchair_accessible,bikes_allowed 12,daily,101,,,0,BLOCK-A,,,,","title":"trips.txt"},{"location":"spec/examples/pretripping-pull-out/#calendartxt","text":"service_id,monday,tuesday,wednesday,thursday,friday,saturday,sunday,start_date,end_date daily,1,1,1,1,1,1,1,01012022,12312022","title":"calendar.txt"},{"location":"spec/examples/pretripping-pull-out/#stop_timestxt","text":"trip_id,arrival_time,departure_time,stop_id,stop_sequence,stop_headsign,pickup_type,drop_off_type,continuous_pickup,continuous_drop_off,shape_dist_traveled,timepoint 101,06:28:00,06:30:00,5490,0,,,,,, 101,06:40:00,06:40:00,5491,1,,,,,, 101,06:50:00,06:50:00,5492,2,,,,,, 101,07:00:00,07:00:00,5493,3,,,,,,","title":"stop_times.txt"},{"location":"spec/examples/pretripping-pull-out/#runs_piecestxt","text":"run_id,piece_id,start_type,start_trip_id,start_trip_position,end_type,end_trip_id,end_trip_position 10000,10000-1,0,daily-deadhead-1,,1,101,","title":"runs_pieces.txt"},{"location":"spec/examples/pretripping-pull-out/#run_eventstxt","text":"run_event_id,piece_id,event_type,event_name,event_time,event_duration,event_to_location_type,event_to_location_id,event_from_location_type,event_from_location_id af0d9802,10000-1,0,,05:50:00,0,0,yard,0,yard ebc02834,10000-1,1,\"pre-trip inspection\",06:07:00,600,0,yard,0,yard 1f4da873,10000-1,7,\"pull-out from yard\",06:20:00,0,0,pull-out-point,0,pull-out-point","title":"run_events.txt"},{"location":"spec/examples/single-run-multiple-pieces/","text":"Single Run with Multiple Pieces \u00b6 In this example, bus driver X is assigned to run 10000 and completes trips 101, 102, 103, and 104 daily. Trips 101 and 102 are part of piece 10000-1 and trips 103 and 104 are part of piece 10000-2. The driver has a long break between the two pieces. The trips serve route 12 and are part of block BLOCK-A. Driver X begins their day at a bus yard prior to trip 101 and returns to the same bus yard following trip 104. Characteristics \u00b6 Run 10000 is subdivided into two pieces. Run 10000 and block BLOCK-A consist of the same deadheads and trips. The trip composition of run 10000, and of pieces 10000-1 and 10000-2, is the same each day of the week. Data \u00b6 trips.txt \u00b6 route_id,service_id,trip_id,trip_headsign,trip_short_name,direction_id,block_id,shape_id,wheelchair_accessible,bikes_allowed 12,daily,101,,,0,BLOCK-A,,,, 12,daily,102,,,1,BLOCK-A,,,, 12,daily,103,,,0,BLOCK-A,,,, 12,daily,104,,,1,BLOCK-A,,,, calendar.txt \u00b6 service_id,monday,tuesday,wednesday,thursday,friday,saturday,sunday,start_date,end_date daily,1,1,1,1,1,1,1,01012022,12312022 deadheads.txt \u00b6 deadhead_id,service_id,block_id,shape_id,to_trip_id,from_trip_id,to_deadhead_id,from_deadhead_id daily-deadhead-1,daily,BLOCK-A,,0,,101 daily-deadhead-2,daily,BLOCK-A,,2,104, runs_pieces.txt \u00b6 run_id,piece_id,start_type,start_trip_id,start_trip_position,end_type,end_trip_id,end_trip_position 10000,10000-1,,0,daily-deadhead-1,,0,daily-deadhead-2,","title":"Single Run with Multiple Pieces"},{"location":"spec/examples/single-run-multiple-pieces/#single-run-with-multiple-pieces","text":"In this example, bus driver X is assigned to run 10000 and completes trips 101, 102, 103, and 104 daily. Trips 101 and 102 are part of piece 10000-1 and trips 103 and 104 are part of piece 10000-2. The driver has a long break between the two pieces. The trips serve route 12 and are part of block BLOCK-A. Driver X begins their day at a bus yard prior to trip 101 and returns to the same bus yard following trip 104.","title":"Single Run with Multiple Pieces"},{"location":"spec/examples/single-run-multiple-pieces/#characteristics","text":"Run 10000 is subdivided into two pieces. Run 10000 and block BLOCK-A consist of the same deadheads and trips. The trip composition of run 10000, and of pieces 10000-1 and 10000-2, is the same each day of the week.","title":"Characteristics"},{"location":"spec/examples/single-run-multiple-pieces/#data","text":"","title":"Data"},{"location":"spec/examples/single-run-multiple-pieces/#tripstxt","text":"route_id,service_id,trip_id,trip_headsign,trip_short_name,direction_id,block_id,shape_id,wheelchair_accessible,bikes_allowed 12,daily,101,,,0,BLOCK-A,,,, 12,daily,102,,,1,BLOCK-A,,,, 12,daily,103,,,0,BLOCK-A,,,, 12,daily,104,,,1,BLOCK-A,,,,","title":"trips.txt"},{"location":"spec/examples/single-run-multiple-pieces/#calendartxt","text":"service_id,monday,tuesday,wednesday,thursday,friday,saturday,sunday,start_date,end_date daily,1,1,1,1,1,1,1,01012022,12312022","title":"calendar.txt"},{"location":"spec/examples/single-run-multiple-pieces/#deadheadstxt","text":"deadhead_id,service_id,block_id,shape_id,to_trip_id,from_trip_id,to_deadhead_id,from_deadhead_id daily-deadhead-1,daily,BLOCK-A,,0,,101 daily-deadhead-2,daily,BLOCK-A,,2,104,","title":"deadheads.txt"},{"location":"spec/examples/single-run-multiple-pieces/#runs_piecestxt","text":"run_id,piece_id,start_type,start_trip_id,start_trip_position,end_type,end_trip_id,end_trip_position 10000,10000-1,,0,daily-deadhead-1,,0,daily-deadhead-2,","title":"runs_pieces.txt"},{"location":"spec/examples/single-run-single-piece/","text":"Single Run with Single Piece \u00b6 In this example, bus driver X is assigned to run 10000 and completes trips 101, 102, 103, and 104 daily. The trips serve route 12 and are part of block BLOCK-A. Driver X begins their day at a bus yard prior to trip 101 and returns to the same bus yard following trip 104. Characteristics \u00b6 Run 10000 is not subdivided into multiple pieces. Run 10000 and block BLOCK-A consist of the same deadheads and trips. The trip composition of run 10000 is the same each day of the week. Data \u00b6 trips.txt \u00b6 route_id,service_id,trip_id,trip_headsign,trip_short_name,direction_id,block_id,shape_id,wheelchair_accessible,bikes_allowed 12,daily,101,,,0,BLOCK-A,,,, 12,daily,102,,,1,BLOCK-A,,,, 12,daily,103,,,0,BLOCK-A,,,, 12,daily,104,,,1,BLOCK-A,,,, calendar.txt \u00b6 service_id,monday,tuesday,wednesday,thursday,friday,saturday,sunday,start_date,end_date daily,1,1,1,1,1,1,1,01012022,12312022 deadheads.txt \u00b6 deadhead_id,service_id,block_id,shape_id,to_trip_id,from_trip_id,to_deadhead_id,from_deadhead_id daily-deadhead-1,daily,BLOCK-A,,101,,, daily-deadhead-2,daily,BLOCK-A,,,104,, runs_pieces.txt \u00b6 run_id,piece_id,start_type,start_trip_id,start_trip_position,end_type,end_trip_id,end_trip_position 10000,10000-1,0,daily-deadhead-1,,0,daily-deadhead-2,","title":"Single Run with Single Piece"},{"location":"spec/examples/single-run-single-piece/#single-run-with-single-piece","text":"In this example, bus driver X is assigned to run 10000 and completes trips 101, 102, 103, and 104 daily. The trips serve route 12 and are part of block BLOCK-A. Driver X begins their day at a bus yard prior to trip 101 and returns to the same bus yard following trip 104.","title":"Single Run with Single Piece"},{"location":"spec/examples/single-run-single-piece/#characteristics","text":"Run 10000 is not subdivided into multiple pieces. Run 10000 and block BLOCK-A consist of the same deadheads and trips. The trip composition of run 10000 is the same each day of the week.","title":"Characteristics"},{"location":"spec/examples/single-run-single-piece/#data","text":"","title":"Data"},{"location":"spec/examples/single-run-single-piece/#tripstxt","text":"route_id,service_id,trip_id,trip_headsign,trip_short_name,direction_id,block_id,shape_id,wheelchair_accessible,bikes_allowed 12,daily,101,,,0,BLOCK-A,,,, 12,daily,102,,,1,BLOCK-A,,,, 12,daily,103,,,0,BLOCK-A,,,, 12,daily,104,,,1,BLOCK-A,,,,","title":"trips.txt"},{"location":"spec/examples/single-run-single-piece/#calendartxt","text":"service_id,monday,tuesday,wednesday,thursday,friday,saturday,sunday,start_date,end_date daily,1,1,1,1,1,1,1,01012022,12312022","title":"calendar.txt"},{"location":"spec/examples/single-run-single-piece/#deadheadstxt","text":"deadhead_id,service_id,block_id,shape_id,to_trip_id,from_trip_id,to_deadhead_id,from_deadhead_id daily-deadhead-1,daily,BLOCK-A,,101,,, daily-deadhead-2,daily,BLOCK-A,,,104,,","title":"deadheads.txt"},{"location":"spec/examples/single-run-single-piece/#runs_piecestxt","text":"run_id,piece_id,start_type,start_trip_id,start_trip_position,end_type,end_trip_id,end_trip_position 10000,10000-1,0,daily-deadhead-1,,0,daily-deadhead-2,","title":"runs_pieces.txt"}]}